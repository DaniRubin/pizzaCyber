import datetime
import json
import logging
import time
import re

from functools import wraps
from logging.handlers import WatchedFileHandler
from werkzeug.routing import BaseConverter
from app_factory import app
from models import db
from flask import render_template, jsonify, request, redirect, url_for
from flask.ext.security.forms import Required
from flask.ext.security import Security, SQLAlchemyUserDatastore, login_required, utils
from flask.ext import login
from flask.ext.wtf.csrf import generate_csrf
from flask_mail import Mail
from flask_security.forms import RegisterForm
from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound

from dateutil import parser

__all__ = ["User", "Message", "Food", "Role"]

# 20% discount
VIP_DISCOUNT = 0.8

# Create app
from wtforms.fields.core import BooleanField
from wtforms.fields.simple import TextField

# Logging
#########
def LogRequestDuration(func):
    @wraps(func)
    def TimeTheFunction(*args, **kwargs):
        start_ts = time.time()
        resp = func(*args, **kwargs)
        end_ts = time.time()
        logging.info("{!s} took {!s} seconds to run".format(func.__name__, round(end_ts - start_ts, 3)))
        return resp

    return TimeTheFunction

logformat = ('%(asctime)s %(filename)s %(lineno)s %(process)d %(levelname)s:  %(message)s')
log_level = logging.INFO
logging.basicConfig(format=logformat, level=log_level)
handler = WatchedFileHandler(filename="/tmp/pizza_site.log")
handler.setFormatter(logging.Formatter(fmt=logformat))
logging.getLogger().addHandler(handler)

####################################
############   MODELs  #############
####################################
from models.message import Message
from models.food import Food, FoodType, FoodOrder
from models.users import User, Role


class ExtendedRegisterForm(RegisterForm):
    user_name = TextField('User Name', [Required()])
    is_vip = BooleanField('VIP User', [])


# Setup Flask-Security
user_datastore = SQLAlchemyUserDatastore(db, User, Role)
security = Security(app, user_datastore, register_form=ExtendedRegisterForm)

# Setup Flask-Mail
app.config['MAIL_SERVER'] = 'smtp.example.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USE_SSL'] = True
app.config['MAIL_USERNAME'] = 'username'
app.config['MAIL_PASSWORD'] = 'password'
mail = Mail(app)

####################################
############   VIEW  ###############
####################################

@app.before_first_request
def create_user():
    db.create_all()
    if not user_datastore.get_user('amir@pizzaplace.com'):
        user_datastore.create_role(name='user', description='Regular pizza user')
        admin_role = user_datastore.create_role(name='vip', description='Pizza VIP')
        first_user = user_datastore.create_user(email='amir@pizzaplace.com', user_name="wilfoa", is_vip=True,
                                                password=utils.encrypt_password('pa55word'))
        second_user = user_datastore.create_user(email='lior@pizzaplace.com', user_name="garso",
                                                 password=utils.encrypt_password('pa55word'))
        # user_datastore.add_role_to_user(first_user, admin_role)
        # user_datastore.add_role_to_user(second_user, admin_role)

        db.session.add_all([
            Food(type=FoodType.PIZZA, image_url="small_pizza.jpg", food_name="Small Pizza", price_in_dollars=10, id=554793),
            Food(type=FoodType.PIZZA, image_url="medium_pizza.jpg", food_name="Medium Pizza", price_in_dollars=15,id=6979634),
            Food(type=FoodType.PIZZA, image_url="large_pizza.jpg", food_name="Large Pizza", price_in_dollars=20, id=7354477),
            Food(type=FoodType.SIDE, image_url="small_drink.jpg", food_name="Small Drink", price_in_dollars=3, id=5698744),
            Food(type=FoodType.SIDE, image_url="medium_drink.jpg", food_name="Medium Drink", price_in_dollars=5, id=6546869),
            Food(type=FoodType.SIDE, image_url="large_drink.jpg", food_name="Large Drink", price_in_dollars=7, id=7346795),
            Food(type=FoodType.SALE, image_url="garlic_bread.jpg", food_name="Garlic Bread", price_in_dollars=4, id=9574123)
        ])

        db.session.add_all([
            Message(from_user_id=1, to_user_id=2, subject="Test email subject 1", message_text="Test message text 1"),
            Message(from_user_id=2, to_user_id=1, subject="Test email subject 2", message_text="Test message text 2"),
            Message(from_user_id=2, to_user_id=1, subject="Test email subject 3", message_text="Test message text 3 <script type='text/javascript'>alert('You have been XSSed!');</script>"),
        ])

        db.session.commit()


def GetUserNavBarParams(user):
    """Returns a dict with the user's Nav Bar data, if the user is logged in
    """
    user_params = dict(
        user_id=None,
        user_is_vip=None,
        user_name=None,
        user_balance=None,
        num_unread_messages=None
    )

    user_is_logged_in = hasattr(user, 'email')

    if user_is_logged_in:
        user_params['user_id'] = user.id
        user_params['user_is_vip'] = user.is_vip
        user_params['user_name'] = user.user_name
        user_params['user_balance'] = user.account_balance
        user_params['num_unread_messages'] = len([message for message in user.messages_received if message.unread])

    return user_params


class RegexConverter(BaseConverter):
    def __init__(self, url_map, *items):
        super(RegexConverter, self).__init__(url_map)
        self.regex = items[0]


app.url_map.converters['regex'] = RegexConverter

@app.route('/')
@LogRequestDuration
def Home():
    user_data_dict = GetUserNavBarParams(login.current_user)
    response = app.make_response(render_template('index.html', **user_data_dict))

    # planting a discount cookie which can be changed by proxy to get users more discounts
    if user_data_dict['user_id']:
        if "user_level" not in request.cookies or request.cookies['user_level'] == "":
            response.set_cookie("user_level", value='3' if user_data_dict['user_is_vip'] else '0', expires=datetime.datetime.utcnow() + datetime.timedelta(weeks=1))
        response.set_cookie("user_name", value=user_data_dict['user_name'], expires=datetime.datetime.utcnow() + datetime.timedelta(weeks=1))
        response.set_cookie("user_id", value=str(user_data_dict['user_id']), expires=datetime.datetime.utcnow() + datetime.timedelta(weeks=1))
        response.set_cookie("pizza_session", value=str(request.cookies['session']), expires=datetime.datetime.utcnow() + datetime.timedelta(weeks=1))
    else:
        if 'user_level' in request.cookies:
            response.set_cookie("user_level", value='')
        if 'user_name' in request.cookies:
            response.set_cookie("user_name", value="")
        if 'user_id' in request.cookies:
            response.set_cookie("user_id", value="")
        if 'session' in request.cookies:
            response.set_cookie("pizza_session", value="")
            response.set_cookie("session", value="")

    return response

#################################################
#########      ACCOUNT REQUESTS      ############
#################################################

@app.route('/charge_account', methods=['POST'])
@login_required
@LogRequestDuration
def ChargeAccount():
    user = User.query.filter_by(id=login.current_user.id).one()
    err_message = None

    desired_amount = float(request.json['amount'])
    user.account_balance += desired_amount
    db.session.commit()
    return jsonify(dict(success=True,
                        server_message="Your account has been charge with ${!s}".format(desired_amount),
                        err_message=err_message,
                        account_balance=user.account_balance))

@app.route('/<regex("(\w+/)?"):prefix>transfer_money', methods=['POST', 'GET'])
@login_required
@LogRequestDuration
def TransferMoneyToAccount(prefix):
    user = login.current_user
    err_message = None
    server_message = None
    amount = float(request.args['amount'])
    user_id = int(request.args['user_id'])

    try:
        if amount <= 0:
            err_message = "You cannot transfer a negative amount of money."
            success = False
        elif user_id == user.id:
            err_message = "You cannot transfer money ot yourself"
            success = False
        elif user.account_balance < amount:
            err_message = "You do not have this kind of money to give."
            success = False
        else:
            receiver = User.query.filter_by(id=user_id).one()
            receiver.account_balance += amount
            user.account_balance -= amount
            db.session.commit()
            success = True
            server_message = (("You have successfully transferred ${!s} to user id {!s} "
                               "from your account balance").format(amount, receiver.id))
    except (NoResultFound, MultipleResultsFound), e:
        err_message = "Could not find the user you wanted"
        success = False
    return jsonify(dict(success=success,
                        server_message=server_message,
                        err_message=err_message,
                        account_balance=user.account_balance))

#################################################
#########      FOOD REQUESTS        #############
#################################################

@app.route('/mobile_promotion', methods=['GET'])
@LogRequestDuration
def GetMobilePromotion():
    user_data_dict = GetUserNavBarParams(login.current_user)

    if re.search(r'pizzaapp', request.headers.get('User-Agent'), re.IGNORECASE) is not None:
        return render_template('mobile-index.html', **user_data_dict)
    else:
        return render_template('forbidden.html', **user_data_dict)

@app.route('/history', methods=['GET'])
@login_required
@LogRequestDuration
def OrderHistory():
    # We pretend we don't know which user sent this request and
    # instead, we use 'requested_user_id'
    requested_user_id = int(request.args['get'])
    user_data_dict = GetUserNavBarParams(login.current_user)

    try:
        order_history = [order.ToDict() for order in User.query.filter_by(id=requested_user_id).one().order_history]
    except (NoResultFound, MultipleResultsFound), e:
        order_history = None
    user_data_dict.update(dict(order_history=order_history))

    return render_template('order_history.html', **user_data_dict)

@app.route('/dishes/<food_type>/<food_id>/discount/<discount>', methods=['POST'])
@login_required
@LogRequestDuration
def OrderFood(food_type, food_id, discount):
    USER_MAX_ORDER = 100
    user = login.current_user
    err_message = None
    server_message = None
    success = False
    discount = float(discount)
    discount_percent = float(discount) / 100

    # Giving way to cookie discount attack
    cookie_discount_or_vip = user.is_vip
    if 'user_level' in request.cookies and int(request.cookies['user_level']) == 3:
        cookie_discount_or_vip = True

    try:
        desired_food = Food.query.filter_by(id=food_id).one()
        # Applying the discount from the webpage and maybe the VIP
        if cookie_discount_or_vip:
            desired_food_price = round(desired_food.price_in_dollars * (VIP_DISCOUNT - discount_percent) if user.is_vip else desired_food.price_in_dollars, 1)
        else:
            desired_food_price = round(desired_food.price_in_dollars * (1 -discount_percent), 1)

        if user.account_balance >= desired_food_price and len(user.order_history) <= USER_MAX_ORDER:
            # Log the food order
            food_order = FoodOrder(food_id=desired_food.id,
                                   user_id=user.id,
                                   price_in_dollars=desired_food_price,
                                   date=parser.parse(request.json['date'].decode('hex')))
            db.session.add(food_order)

            user.account_balance -= desired_food_price
            db.session.commit()
            success = True
            server_message = "Your {!s} is on it's way!!!".format(desired_food.food_name)

            if cookie_discount_or_vip:
                server_message += " You got our VIP discount of {!s}%".format((1 - VIP_DISCOUNT) * 100)

            if discount > 0:
                server_message += " and you got another" if cookie_discount_or_vip else " You got"
                server_message += " a discount of {!s}%".format(discount_percent * 100)
            server_message += ". You paid ${!s}".format(desired_food_price)
        else:
            if len(user.order_history) > USER_MAX_ORDER:
                err_message = ("Don't you think you may have gotten a little bit too much pizza?")
            else:
                err_message = ("You do not have enough funds to get this. "
                               "Please charge your account or get money transferred into it")
    except (NoResultFound, MultipleResultsFound), e:
        err_message = "Could not find the food you wanted"
        success = False
    return jsonify(dict(success=success,
                        server_message=server_message,
                        err_message=err_message,
                        account_balance=user.account_balance))

@app.route('/dishes/pizzas/mobile')
@LogRequestDuration
def GetMobilePizzaSelection():
    return jsonify(dict(pizzas=[pizza.ToDict() for pizza in Food.query.filter_by(type=FoodType.SALE).all()]))

@app.route('/dishes/pizzas')
@LogRequestDuration
def GetPizzasSelection():
    return jsonify(dict(pizzas=[pizza.ToDict() for pizza in Food.query.filter_by(type=FoodType.PIZZA).all()]))

@app.route('/dishes/sides')
@LogRequestDuration
def GetSidesSelections():
    return jsonify(dict(sides=[pizza.ToDict() for pizza in Food.query.filter_by(type=FoodType.SIDE).all()]))


#################################################
#########      MESSAGES REQUESTS    #############
#################################################

@app.route('/messages/<int:message_id>', methods=['PUT'])
@login_required
@LogRequestDuration
def UpdateUserMessage(message_id):
    user = login.current_user
    try:
        message = Message.query.filter_by(id=message_id).one()
        if message.to_user_id == user.id:
            message.unread = json.loads(request.data)['unread']
            db.session.commit()
    except (NoResultFound, MultipleResultsFound), e:
        pass
    return jsonify(dict(unread_messages=len([message for message in user.messages_received if message.unread])))


@app.route('/messages', methods=['GET'], defaults={"requested_message_id": None})
@app.route('/messages/<int:requested_message_id>', methods=['GET'])
@login_required
@LogRequestDuration
def MessageView(requested_message_id):
    user_data_dict = GetUserNavBarParams(login.current_user)
    user = login.current_user
    user_data_dict.update(dict(requested_message=next(iter([message.ToDict() for message in user.messages_received if message.id == requested_message_id]), None),
                               messages=[message.ToDict() for message in user.messages_received]))
    # For exercise purposes we want to allow sending anew message with a GET
    # so we distinguish between sending a message and getting the user messages
    # by the request parameters
    # For POST, create and send a new message
    if len(request.args) > 0:
        err_message = None
        server_message = None

        try:
            to_user_id = User.query.filter_by(user_name=request.args["to_user"]).one().id
            message = Message.FromDict(dict(
                from_user_id=user.id,
                to_user_id=to_user_id,
                subject=request.args['subject'],
                message_text=request.args['message_text']
            ))

            User.query.filter_by(id=message.to_user_id).one()
            db.session.add(message)
            db.session.commit()
            success = True
            server_message = "Message sent to {!s}!".format(message.to_user.user_name)
        except (NoResultFound, MultipleResultsFound), e:
            err_message = "Could not find the user you wanted to send an email to"
            success = False

            user_data_dict.update(dict(success=success,
                                       err_message=err_message,
                                       server_message=server_message))

            return render_template("inbox.html", **user_data_dict)

        return redirect(url_for("MessageView"))
    else:
        return render_template("inbox.html", **user_data_dict)

#################################################
#########      STATIC REQUESTS      #############
#################################################

user_regex = '"(((\d+/)?(\w+/)?)+)?"'

@app.route('/<regex({!s}):user_id>change-password-dialog.html'.format(user_regex))
@LogRequestDuration
def GetChangePasswordDialog(user_id):
    return render_template('change-password-dialog.html', csrf_token=generate_csrf())

@app.route('/<regex({!s}):user_id>login-dialog.html'.format(user_regex))
@LogRequestDuration
def GetLoginDialog(user_id):
    return render_template('login-dialog.html', csrf_token=generate_csrf())

@app.route('/<regex({!s}):user_id>register-dialog.html'.format(user_regex))
@LogRequestDuration
def GetRegisterDialogForView(user_id):
    return render_template('register-dialog.html'.format(user_regex), csrf_token=generate_csrf())

@app.route('/<regex({!s}):user_id>transfer-money-dialog.html'.format(user_regex))
@LogRequestDuration
def GetTransferMoneyDialog(user_id):
    return render_template('transfer-money-dialog.html'.format(user_regex))

@app.route('/<regex({!s}):user_id>charge-account-dialog.html'.format(user_regex))
@LogRequestDuration
def GetChargeAccountDialog(user_id):
    return render_template('charge-account-dialog.html'.format(user_regex))

@app.route('/<regex({!s}):user_id>dishes-tabs.html'.format(user_regex))
@LogRequestDuration
def GetDishesTabs(user_id):
    return render_template('dishes-tabs.html'.format(user_regex))

@app.route('/<regex({!s}):user_id>pizzas.html'.format(user_regex))
@LogRequestDuration
def GetPizzaTab(user_id):
    return render_template('pizzas.html'.format(user_regex))

@app.route('/<regex({!s}):user_id>sides.html'.format(user_regex))
@LogRequestDuration
def GetSidesTab(user_id):
    return render_template('sides.html'.format(user_regex))

if __name__ == '__main__':
    app.run('0.0.0.0', port=8080)